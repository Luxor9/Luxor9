version: '3.8'

services:
  # Development environment for the entire monorepo
  dev:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "3000-3010:3000-3010"  # Port range for multiple services
    environment:
      - NODE_ENV=development
    command: npm run dev

  # SaaS applications
  saas-app:
    build:
      context: .
      target: saas-production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  # AI services
  ai-service:
    build:
      context: .
      target: ai-production
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - NODE_ENV=production
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    depends_on:
      - redis
      - vector-db

  # Tools and CLI services
  tools-service:
    build:
      context: .
      target: tools-production
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      - postgres

  # Supporting services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: luxoranova9
      POSTGRES_USER: luxoranova
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-development}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Vector database for AI services
  vector-db:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - vector_data:/qdrant/storage
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - saas-app
      - ai-service
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  vector_data:

networks:
  default:
    driver: bridge